+-----------------------+-----------------------------------------------+--------------------------------------------------+
|      **Aspect**        |                  **algorithm**                 |                   **other containers**           |
+-----------------------+-----------------------------------------------+--------------------------------------------------+
| **Purpose**            | A standard library header providing a collection| Containers such as **vector**, **set**, **map**, |
|                       | of generic algorithms that operate on ranges,  | **deque**, **list**, etc., are used to store data |
|                       | sequences, and containers.                     | and are typically passed to `algorithm` functions.|
+-----------------------+-----------------------------------------------+--------------------------------------------------+
| **Key Functions**      | `sort()`, `reverse()`, `find()`, `binary_search()`,| Various functions for data management and access |
|                       | `copy()`, `swap()`, `unique()`, `remove()`,     | like `push_back()`, `pop_front()`, `insert()`,    |
|                       | `accumulate()`, `count()`, `for_each()`, and many| `erase()`, etc., which manipulate container data. |
|                       | more.                                           |                                                  |
+-----------------------+-----------------------------------------------+--------------------------------------------------+
| **Time Complexity**    | Varies based on the algorithm. Some common:    | Dependent on the container's internal structure, |
|                       | - `sort()`: O(n log n)                         | like O(1) for accessing vector elements or O(n)  |
|                       | - `find()`: O(n)                               | for searching in a list. Container operations    |
|                       | - `reverse()`: O(n)                            | like `push_back()` and `insert()` also vary in    |
|                       | - `accumulate()`: O(n)                         | complexity depending on the container.            |
+-----------------------+-----------------------------------------------+--------------------------------------------------+
| **Function Type**      | **Generic** algorithms that work with iterators,| **Container-specific** methods that are used to   |
|                       | making them flexible to work with any container. | manipulate and access data stored in containers.  |
+-----------------------+-----------------------------------------------+--------------------------------------------------+
| **Use Case**           | Used to perform operations on data within      | Containers store and manage the data while        |
|                       | containers, especially when needing functions   | algorithms operate on these containers to modify  |
|                       | that work across a range of elements.           | or query the data.                               |
+-----------------------+-----------------------------------------------+--------------------------------------------------+
| **Sorting**            | `sort()`, `partial_sort()`, `stable_sort()`,    | Sorting algorithms can be applied to **vector**,  |
|                       | `nth_element()`                                 | **deque**, and other containers, but `set` and    |
|                       | (most efficient)                               | `map` are always sorted by default.              |
+-----------------------+-----------------------------------------------+--------------------------------------------------+
| **Searching**          | `find()`, `binary_search()`, `lower_bound()`,   | Containers like **vector** and **list** are used  |
|                       | `upper_bound()`                                 | in conjunction with search algorithms such as     |
|                       | (searches within a range or container)          | `find()` and `binary_search()` (especially in     |
|                       |                                               | sorted containers).                               |
+-----------------------+-----------------------------------------------+--------------------------------------------------+
| **Manipulation**       | `reverse()`, `rotate()`, `swap()`, `copy()`,    | Containers have methods like `push_back()`,       |
|                       | `move()`, `fill()`, `unique()`, etc.            | `insert()`, and `erase()` to manipulate elements. |
+-----------------------+-----------------------------------------------+--------------------------------------------------+
| **Predicate Functions**| `any_of()`, `all_of()`, `none_of()`, `count_if()`,| Containers may use predicates within algorithm   |
|                       | `for_each()`                                   | functions like `find()` or `remove()`.            |
+-----------------------+-----------------------------------------------+--------------------------------------------------+
| **Key Methods**        | `sort()`, `reverse()`, `find()`, `count()`,     | Containers: `push_back()`, `insert()`, `erase()`, |
|                       | `unique()`, `remove()`, `copy()`, `accumulate()`,| `clear()`, `size()`, `begin()`, `end()`, etc.     |
|                       | `for_each()`, `all_of()`, `any_of()`, etc.      |                                                  |
+-----------------------+-----------------------------------------------+--------------------------------------------------+

algorithm: A header that provides generic algorithms for common tasks like searching, sorting, modifying, and querying containers.

Containers: Data structures like vector, deque, set, map, etc., that store data and provide container-specific methods.


+-------------------+---------------------------------------------------------------+
|    **Keyword**     |                       **All Examples Combined**             |
+-------------------+---------------------------------------------------------------+
| **Description**    | Demonstrating common C++ algorithms like sorting, reversing, |
|                   | searching, accumulating, copying, and removing duplicates.   |
+-------------------+---------------------------------------------------------------+
| **Example**        | #include <iostream>                                           |
|                   | #include <algorithm>                                          |
|                   | #include <numeric>                                            |
|                   | #include <vector>                                             |
|                   |                                                              |
|                   | int main() {                                                  |
|                   |     // Sample vector with some duplicate values              |
|                   |     std::vector<int> v = {1, 3, 2, 5, 3, 4, 1};              |
|                   |                                                              |
|                   |     // 1. Sort the vector in ascending order                 |
|                   |     std::sort(v.begin(), v.end());                            |
|                   |     std::cout << "Sorted: ";                                  |
|                   |     for (int n : v) {                                         |
|                   |         std::cout << n << " ";                                |
|                   |     }                                                         |
|                   |     std::cout << std::endl;                                   |
|                   |                                                              |
|                   |     // 2. Reverse the vector                                  |
|                   |     std::reverse(v.begin(), v.end());                         |
|                   |     std::cout << "Reversed: ";                                |
|                   |     for (int n : v) {                                         |
|                   |         std::cout << n << " ";                                |
|                   |     }                                                         |
|                   |     std::cout << std::endl;                                   |
|                   |                                                              |
|                   |     // 3. Find a value in the vector                          |
|                   |     auto it = std::find(v.begin(), v.end(), 3);               |
|                   |     if (it != v.end()) {                                      |
|                   |         std::cout << "Found 3: " << *it << std::endl;         |
|                   |     }                                                         |
|                   |                                                              |
|                   |     // 4. Accumulate the sum of elements                      |
|                   |     int sum = std::accumulate(v.begin(), v.end(), 0);         |
|                   |     std::cout << "Sum: " << sum << std::endl;                 |
|                   |                                                              |
|                   |     // 5. Copy the vector to a new vector                      |
|                   |     std::vector<int> v_copy(v.size());                        |
|                   |     std::copy(v.begin(), v.end(), v_copy.begin());            |
|                   |     std::cout << "Copied: ";                                  |
|                   |     for (int n : v_copy) {                                    |
|                   |         std::cout << n << " ";                                |
|                   |     }                                                         |
|                   |     std::cout << std::endl;                                   |
|                   |                                                              |
|                   |     // 6. Remove consecutive duplicates                       |
|                   |     auto last = std::unique(v.begin(), v.end());              |
|                   |     v.erase(last, v.end());                                   |
|                   |     std::cout << "Unique: ";                                  |
|                   |     for (int n : v) {                                         |
|                   |         std::cout << n << " ";                                |
|                   |     }                                                         |
|                   |     std::cout << std::endl;                                   |
|                   |     return 0;                                                 |
|                   | }                                                             |
| **Output**         | Sorted: 1 1 2 3 3 4 5                                        |
|                   | Reversed: 5 4 3 3 2 1 1                                      |
|                   | Found 3: 3                                                    |
|                   | Sum: 18                                                       |
|                   | Copied: 5 4 3 3 2 1 1                                        |
|                   | Unique: 5 4 3 2 1                                            |
+-------------------+---------------------------------------------------------------+
sort(): Sorts the vector in ascending order.

reverse(): Reverses the order of elements in the vector.

find(): Searches for the first occurrence of the value 3 and prints it.

accumulate(): Computes the sum of the vector elements.

copy(): Copies the sorted/reversed vector to a new vector and prints it.

unique(): Removes consecutive duplicates and then prints the unique elements.



Lambda Function:

The syntax for a lambda is: [](parameters) { body }

The [] is where you specify captured variables (which are variables from the outer scope that the lambda can access). We will discuss that in more detail below.

The parameters (e.g., int& num) specify the input to the lambda.

The body of the lambda defines what happens with those parameters (for instance, modifying them or printing them).





#include<iostream>
#include<vector>
#include<map>
#include<algorithm>

using namespace std;
int main()
{
  //sorting
  //int arr[5]={1,2,3,4,5};
  vector<int> arr={1,0,4,8,2};
  //sort(arr.begin(),arr.end());-->increasing
  //sort(arr.begin(),arr.end(),greater<int>());-->decreasing
  //reverse(arr.begin(),arr.end());
  
 // reverse(arr,arr+5);
  
 //cout<<*(max_element(arr.begin(),arr.end()));
 cout<<binary_search(arr.begin(),arr.end(),4);

//it is always mandatory for you if u use for(type var:vector) 
}

2> swap,min,max;
 cout<<max(4,3)<<cout<<min(1,0);
output:-) 
 4,0

simpilary swap(2,3);-->output=3,2;
