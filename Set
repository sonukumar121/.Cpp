#include<stdio.h>
#include<Set>
using namesapce std;
// insert,count,erase,find,size,empty,erase;
int main()
{
  set<int> s;
1> //insert
  s.insert(1);
  s.insert(2);
  s.erase(1);
}
for(auto v:s)
{
   if(s.find(1)!=s.end()){

}
2>//we can access the ith position of the set values directly. like arrays.
*s.lower_bound(2) ==>any value which is in set which are just greater than 2 in case 2 is present so return 2.;
*s.lowe_bound(10)==>if any value in set which are not greater than 10 then return the value s.end() which means zero =0;

*s.upper_bound()==>similar to lower bound but the diff is set key value greater than  key [not equal].
for ex-->
s.insert(1);
s.insert(2);
s.insert(3);
s.insert(4);
s.insert(5);
cout<<"lower_bound value is": *(s.lower_bound(4))<<endl;
cout<<"upper_bound value is": *(s.lower_bound(4))<<endl;

output:-) lower_bound=4 and 
          upper_bound=5


2>MULTI_SET
multi_Set<int> s;
s.insert(1);
s.insert(2);
s.insert(3);
s.insert(4);
s.insert(5);
s.insert(1);
s.insert(2);
s.insert(3);
output:-)
 1 1 2 2 3 3 4 5 .

3>unordered_set<int> s;
s.insert(1);
s.insert(2);
s.insert(3);
s.insert(4);
s.insert(5);
s.insert(1);
s.insert(2);
s.insert(3);
output:)
5 3 2 1 4 -->any random order can  be print by compiler.


