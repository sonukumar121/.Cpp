   v.erase(remove(v.begin(), v.end(), 0), v.end());
   remove is used for list elements not vector..

for(int value : container)
Summary:
You can use the range-based for loop for:
vector
set
list
deque
//
But you cannot use it directly for:
stack
queue

//(v.begin(),v.end());
1>std::vector<int> v = {1, 2, 3, 4};
std::sort(v.begin(), v.end());



2>std::list<int> v = {1, 2, 3, 4};
v.sort();



3>std::set<int> v = {1, 2, 3, 4};
for (auto it = v.begin(); it != v.end(); ++it) {
    std::cout << *it << " ";
}



4>std::deque<int> v = {1, 2, 3, 4};
std::sort(v.begin(), v.end());



5>std::pair<int, int> p = {1, 2};
std::cout << p.first << " " << p.second << std::endl;



6>std::map<int, std::string> v = {{1, "one"}, {2, "two"}, {3, "three"}};
for (auto it = v.begin(); it != v.end(); ++it) {
    std::cout << it->first << ": " << it->second << std::endl;
}



Container Type	Loop Type	Explanation
std::vector	Simple for loop (index-based)	Supports random access by index, so you can use simple for loops.

std::deque	Simple for loop (index-based)	Supports random access by index, so you can use simple for loops.

std::list	Iterator-based loop (for (auto it = v.begin(); it != v.end(); ++it))	Does not support random access; use iterators.

std::set	Iterator-based loop (for (auto it = v.begin(); it != v.end(); ++it))	Does not support random access; use iterators.

std::map	Iterator-based loop (for (auto it = v.begin(); it != v.end(); ++it))	Does not support random access; use iterators.

std::unordered_map	Iterator-based loop (for (auto it = v.begin(); it != v.end(); ++it))	Does not support random access; use iterators.

Any container	Range-based for loop (for (auto& elem : v))	Works with any container; simpler and cleaner syntax.

//advance,for(int val:container) ,for(auto it) for all expect stack and queue.


//advanced algorithm for_each ..
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5};

    std::for_each(vec.begin(), vec.end(), [](int& num) {
        num *= 2;  // Multiply each element by 2
    });

    for (auto val : vec) {
        std::cout << val << " ";  // Output: 2 4 6 8 10
    }

    return 0;
}
