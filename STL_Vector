#include <iostream>
#include <vector>
using namespace std;
*-->DEFERENCE OPERATORS.
                          DECLERATIONS
//initilisation of vectors:
/*1>vector<int> vec;
2>vector<int> vec={1,2};
3>vector<int> vec(3,10);=(size of vector , value passing).
4>vector<int> vec2(vec1);*/

      //size,erase,clear,begin,end,rbegin,rend,insert,front,back;

*SIZE AND CAPACITY(WORK ON GP)
*PUSH_BACK()/FRONT AND POP_BACK()/FRONT
*AT() OR []
*FRONT() AND BACK() -->(first and last index elements element access.)
*CLEAR() AND EMPTY()
*INSERT(POSITION,VALUE)//(VEC.BEGIN+2,VALUE).
*VECTOR ITERATORS-->1>VEC.BEGIN(). AND VEC.END() //(JUST LIKE ARRAY).....VEC.END POINTS TO N+! ARRAY INDEX.

*VECTOR.begin()-->(forward iterators)...
SYNTAX-

vector<int>::iterator it;
for(it=vec.begin(); it!=vec.end(); it++)
{
   cout<<*(it) <<endl;
}


*VECTOR.rbegin() -->(reverse/backward iterators)//iterators of vectors..
SYNATX-

for(auto it=vec.rbegin();it!=vec.rend();it++)
{
cout<<*(it)<<endl;

// auto-->rbegin or begin both valid.or forward backward.
//both the index at (n-1) for reverse end and index (n+1) for forward end .


#include<iostream>
#include<vector>
using namespace std;
int main()
{
   vector<int>vec={1,2,3,4,5};
   for(auto it=vec.begin();it!=vec.end();it++)

   {
    cout<< *(it);
   }
} 









#include<iostream>
#include<vector>
#include<list>
#include<deque>
#include<stack>
using namespace std;

//list,deque,pair,emplace_back().
int main()
{
    /*
    //Doubly link list(list)
   list<int> l;
   l.push_back(3);
   l.push_back(10);
   l.push_front(11);
   l.push_front(30);
   for(int val:l)
   {
    cout<<val<<" ";

    deque<int> d={1,2,3,4,5};
    {
       for(int val:d)
       {
         cout<<val;
       } 
       
       cout<<d[2];
    }


    //pair -->same as look like structure.

    //1st way:-
    pair<int,char> p={2,'a'};
    cout<<p.first;
    cout<<p.second;


    //2nd way:-
    pair<int,pair<int,char>> p={1,{5,'a'}};
    cout<<p.first;
    cout<<p.second.first;

    vector<pair<int,int>> vec={{5,3},{2,1},{6,7}};
    for(pair<int,int> p: vec)
    {
       cout<<p.first<<" "<<p.second<<endl;
    }

    vector<pair<int,int>> vec={{5,3},{2,1},{6,7}};
    vec.push_back({1,2});-->they assume that you are already made a set.
    vec.emplace_back(2,3);-->create automatically create pair for user.

    for(auto p: vec)
    {
       cout<<p.first<<" "<<p.second<<endl;
}
    
 
  
    

      
       
    
          
          


   

    stack<int> s;
     s.push(1);
     s.push(2);//3,2,1
     s.push(3);
     while(!s.empty())
     {
        cout<<s.top();
        s.pop();
     }


     stack<int> s;
     if(s.empty()==true)

    {
        cout<<"yes";
    }
else
{
    cout<<"no";
}
 */

 stack<int> s;
     s.push(1);
     s.push(2);//3,2,1
     s.push(3);
 stack<int> s2;
 s2.swap(s);
 cout<<"the size of s: "<<s.size()<<endl<<"the size of s2:"<<s2.size()<<endl;

}






    //stacks ==> pop(),top(),push(),empty(),swap();
    //queue==>   pop(),top(),push(),empty(),swap();
    //Max,Min,Binary searching,swap,sorting,nextpermuatation, Reverse.

    //1> (Sorting)
         *sort(arr,arr+n) // arr act like a pointer so passing the position (start,end)=(arr,arr+5).
         *sort(vec.begin(),vec.end());
         *sort(arr,arr+n,greater<int>())

    //2>(Reverse)
         reverse(v.begin(),v.end())

    //3(Next permutation)
       next_permutation(v.begin(),v.end())

    //4((Max and Min elements)
       *max_element(v.begin(),v.end());
       *min_element(v.begin(),v.end());

     //5>binary_search(v.begin(),v.end(),target)


     //6> multi map
          map<string , int > m;
          m[key]=value; //key product .
          //insert,emplace,erase,find,size,empty



            //EXAMPLES OF MOST USING ALGOTIGHM STL


#include<iostream>
#include<vector>
#include<map>
#include<algorithm>

using namespace std;
int main()
{
  //sorting
  //int arr[5]={1,2,3,4,5};
  vector<int> arr={1,0,4,8,2};
  //sort(arr.begin(),arr.end());-->increasing
  //sort(arr.begin(),arr.end(),greater<int>());-->decreasing
  //reverse(arr.begin(),arr.end());
  
 // reverse(arr,arr+5);
  
 //cout<<*(max_element(arr.begin(),arr.end()));
 cout<<binary_search(arr.begin(),arr.end(),4);

//it is always mandatory for you if u use for(type var:vector) 
}





int main() {
    // Create a vector with some elements
    std::vector<int> vec = {1, 2, 3, 4, 5, 6, 7};

    // Define start and end indices for clearing
    int start = 2, end = 4;  // For example, clear elements from index 2 to 4

    // Erase elements from index `start` to `end` (inclusive)
    vec.erase(vec.begin() + start, vec.begin() + end + 1);
