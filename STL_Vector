+---------------------+-----------------------------------------------+--------------------------------------------------+
|      **Aspect**      |                   **vector**                  |                   **deque**                     |
+---------------------+-----------------------------------------------+--------------------------------------------------+
| **Implementation**   | Dynamic array that stores elements in contiguous | Dynamic array of blocks, allowing fast insertion |
|                     | memory locations.                              | and deletion at both ends.                      |
+---------------------+-----------------------------------------------+--------------------------------------------------+
| **Access Time**      | O(1) for accessing elements by index.         | O(1) for accessing elements at both ends.       |
|                     |                                               | O(n) for accessing elements in the middle.      |
+---------------------+-----------------------------------------------+--------------------------------------------------+
| **Insert/Erase**     | O(n) for inserting/removing elements at the    | O(1) for insertion/removal at both ends.        |
|                     | beginning or middle (due to shifting).         | O(n) for insertion/removal at random positions. |
+---------------------+-----------------------------------------------+--------------------------------------------------+
| **Memory Usage**     | Contiguous memory block. May reallocate memory | Allocates memory in chunks (blocks). Can have    |
|                     | when resizing.                                 | extra memory overhead for managing blocks.      |
+---------------------+-----------------------------------------------+--------------------------------------------------+
| **Size/Capacity**    | Dynamic resizing, but can waste memory if the  | Grows dynamically by allocating in blocks.      |
|                     | size increases or decreases frequently.       | Usually more efficient with memory management.   |
+---------------------+-----------------------------------------------+--------------------------------------------------+
| **Use Case**         | Ideal for situations where elements need to   | Ideal for when you need efficient insertion and |
|                     | be accessed by index or when inserting/removing| removal at both ends (like in queues).           |
|                     | elements mostly at the end.                   |                                                  |
+---------------------+-----------------------------------------------+--------------------------------------------------+
| **Iteration**        | Efficient iteration through contiguous memory  | Iteration may be slightly slower than `vector`   |
|                     | locations.                                     | due to block-based allocation.                  |
+---------------------+-----------------------------------------------+--------------------------------------------------+
| **Key Methods**      | `push_back()`, `pop_back()`, `insert()`, `erase()`,| `push_back()`, `push_front()`, `pop_back()`,     |
|                     | `at()`, `front()`, `back()`, `size()`, `clear()`,| `pop_front()`, `insert()`, `erase()`, `size()`,  |
|                     | `empty()`, `resize()`, `shrink_to_fit()`.      | `resize()`, `clear()`, `empty()`.               |
+---------------------+-----------------------------------------------+--------------------------------------------------+

vector: A dynamic array providing fast random access by index and efficient insertion/removal at the end. However, operations like insertions or deletions at the beginning or middle can be slow due to the need to shift elements.

deque: A double-ended queue that allows efficient insertion and removal from both ends but might have more memory overhead due to its block-based allocation.






#include <iostream>
#include <vector>
using namespace std;
*-->DEFERENCE OPERATORS.
                          DECLERATIONS
//initilisation of vectors:
/*1>vector<int> vec;
2>vector<int> vec={1,2};
3>vector<int> vec(3,10);=(size of vector , value passing).
4>vector<int> vec2(vec1);*/

      //size,erase,clear,begin,end,rbegin,rend,insert,front,back;

*SIZE AND CAPACITY(WORK ON GP)
*PUSH_BACK()/FRONT AND POP_BACK()/FRONT
*AT() OR []
*FRONT() AND BACK() -->(first and last index elements element access.)
*CLEAR() AND EMPTY()
*INSERT(POSITION,VALUE)//(VEC.BEGIN+2,VALUE).
*VECTOR ITERATORS-->1>VEC.BEGIN(). AND VEC.END() //(JUST LIKE ARRAY).....VEC.END POINTS TO N+! ARRAY INDEX.

*VECTOR.begin()-->(forward iterators)...
SYNTAX-

vector<int>::iterator it;
for(it=vec.begin(); it!=vec.end(); it++)
{
   cout<<*(it) <<endl;
}


*VECTOR.rbegin() -->(reverse/backward iterators)//iterators of vectors..
SYNATX-

for(auto it=vec.rbegin();it!=vec.rend();it++)
{
cout<<*(it)<<endl;

// auto-->rbegin or begin both valid.or forward backward.
//both the index at (n-1) for reverse end and index (n+1) for forward end .


#include<iostream>
#include<vector>
using namespace std;
int main()
{
   vector<int>vec={1,2,3,4,5};
   for(auto it=vec.begin();it!=vec.end();it++)

   {
    cout<< *(it);
   }
} 









#include<iostream>
#include<vector>
#include<list>
#include<deque>
#include<stack>
using namespace std;

//list,deque,pair,emplace_back().
int main()
{
    /*
    //Doubly link list(list)
   list<int> l;
   l.push_back(3);
   l.push_back(10);
   l.push_front(11);
   l.push_front(30);
   for(int val:l)
   {
    cout<<val<<" ";

    deque<int> d={1,2,3,4,5};
    {
       for(int val:d)
       {
         cout<<val;
       } 
       
       cout<<d[2];
    }


    //pair -->same as look like structure.

    //1st way:-
    pair<int,char> p={2,'a'};
    cout<<p.first;
    cout<<p.second;


    //2nd way:-
    pair<int,pair<int,char>> p={1,{5,'a'}};
    cout<<p.first;
    cout<<p.second.first;

    vector<pair<int,int>> vec={{5,3},{2,1},{6,7}};
    for(pair<int,int> p: vec)
    {
       cout<<p.first<<" "<<p.second<<endl;
    }

    vector<pair<int,int>> vec={{5,3},{2,1},{6,7}};
    vec.push_back({1,2});-->they assume that you are already made a set.
    vec.emplace_back(2,3);-->create automatically create pair for user.

    for(auto p: vec)
    {
       cout<<p.first<<" "<<p.second<<endl;
}
    
 
  
    

      
       
    
          
          


   

    stack<int> s;
     s.push(1);
     s.push(2);//3,2,1
     s.push(3);
     while(!s.empty())
     {
        cout<<s.top();
        s.pop();
     }


     stack<int> s;
     if(s.empty()==true)

    {
        cout<<"yes";
    }
else
{
    cout<<"no";
}
 */

 stack<int> s;
     s.push(1);
     s.push(2);//3,2,1
     s.push(3);
 stack<int> s2;
 s2.swap(s);
 cout<<"the size of s: "<<s.size()<<endl<<"the size of s2:"<<s2.size()<<endl;

}






    //stacks ==> pop(),top(),push(),empty(),swap();
    //queue==>   pop(),top(),push(),empty(),swap();
    //Max,Min,Binary searching,swap,sorting,nextpermuatation, Reverse.

    //1> (Sorting)
         *sort(arr,arr+n) // arr act like a pointer so passing the position (start,end)=(arr,arr+5).
         *sort(vec.begin(),vec.end());
         *sort(arr,arr+n,greater<int>())

    //2>(Reverse)
         reverse(v.begin(),v.end())

    //3(Next permutation)
       next_permutation(v.begin(),v.end())

    //4((Max and Min elements)
       *max_element(v.begin(),v.end());
       *min_element(v.begin(),v.end());

     //5>binary_search(v.begin(),v.end(),target)


     //6> multi map
          map<string , int > m;
          m[key]=value; //key product .
          //insert,emplace,erase,find,size,empty



            //EXAMPLES OF MOST USING ALGOTIGHM STL


#include<iostream>
#include<vector>
#include<map>
#include<algorithm>

using namespace std;
int main()
{
  //sorting
  //int arr[5]={1,2,3,4,5};
  vector<int> arr={1,0,4,8,2};
  //sort(arr.begin(),arr.end());-->increasing
  //sort(arr.begin(),arr.end(),greater<int>());-->decreasing
  //reverse(arr.begin(),arr.end());
  
 // reverse(arr,arr+5);
  
 //cout<<*(max_element(arr.begin(),arr.end()));
 cout<<binary_search(arr.begin(),arr.end(),4);

//it is always mandatory for you if u use for(type var:vector) 
}





int main() {
    // Create a vector with some elements
    std::vector<int> vec = {1, 2, 3, 4, 5, 6, 7};

    // Define start and end indices for clearing
    int start = 2, end = 4;  // For example, clear elements from index 2 to 4

    // Erase elements from index `start` to `end` (inclusive)
    vec.erase(vec.begin() + start, vec.begin() + end + 1);






//array of vector and vector of vector

1>array of vector:-)
  index-0= _,_,_,
  index-1=_,_,
  ....
v[0].push_back(1)
v[0]push_back(2)
v[1]push_back(3)
output-->
 1 2
 3

2>vector of vector:-)
vector<vector<int> v;
v.push_back({12,1,3);
v.push_back({1,2,3});
for(i=0;i<v.size();i++)
{
for(auto it=v[i].begin();it!=v[i].end();it++)
{
 cout<<*it;
}
}
