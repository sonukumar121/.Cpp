Class -->bluprint of the car
Objects-->how many cars.
class -->under -->properties attributes
members functions.for exa->changedepartment()
pubic->data & memebers accisble to everyone.(by default private).
private->data & methods accisble inside class.
protected-> data & methods accisble inside class & to its derived class.
a>Encapsulations
b>Abstactions
c>Inheritence
d>Polymorphism
*>Encapsulation-->Encapsulation is wrapping up of data & memebers fn in a single unit called class.



                                 :STARTING MAIN TOPICS DEFINE WITH CODES:
1>*CONSTRUCTOR-->Special method involved automatically at time of object creation.Used for Initilisation.
*Same name as Class
*Constructor doesnt have return type
*Only called once automatically at object creation
*Memory allocation happens when constructor is called.

a>default constructor
b>parametrized constructor
c>copy constructor

/*#include <iostream>
using namespace std;
//constructor
class s
{ 
public:
  int a,b;
   s() // default constructor
   {
     cout<<"hi I am default constructor";
   }

};

int main()
{
  s obj;

}*/

/*#include <iostream>
using namespace std;
//constructor
class number
{ 
public:
  int a,b;
   number(int a,int b) // peramatrized constructor
   {
     cout<<"hi I am parametrized contructot your sum is:"<<a+b;
   }

};

int main()
{
  number obj(20,30);
}*/


/*#include <iostream>
using namespace std;
//constructor
class number
{ 
public:
int x,y;
  int a,b;
   number(int a,int b) // copy constructor
   {
       x=a;
       y=b;
     cout<<x<<ends<<y<<endl;
   }

   number(number &ref)//ref use for copy
   {
      x=ref.x;
      y=ref.y;
      cout<<x<<ends<<y;

   }

};

int main()
{
  number obj(20,30); // number obj=number();-->backend
  number obj2=obj; //obj2 is the obj of copy constructor.
}
*/





6> DESTRUCTORS-->Use for seallcoate the memory which are created when compiler call the constructor.

include <iostream>
using namespace std;

class student
{
       public:
   student()
   {
       cout<<"constructor call"<<endl;
   }

   ~student()

   {
        cout<<"constructor deallocate";
   }
};

int main()
{
       student obj;
}




8>FRIEND FUNCTIONS
*SYNTAX-->friend return_type function_name(class ref);
                FRIEND FUNCTION
/*#include <iostream>
using namespace std;
//constructor
class sonu
{
   private:
   string tv;

   public:

   void show()
   {
    tv="IPL FINAL 2024";
   }


friend void abhi(sonu r);

};

void abhi(sonu r)
{
 cout<<"hi i am abhi now i am watching tv"<<r.tv; 
}

int main()

{
  sonu a;
  a.show();
  abhi(a);
}*/


           FRIEND CLASS

#include <iostream>
using namespace std;

class sonu
{
  int rup=100;
  public:
  friend class abhi;
};


class abhi

{
  public:
  void check(sonu r)
  {
    cout<<"Thank you! sonu i recieved"<<r.rup;
  }
};

int main()

{
  sonu s;
  abhi a;
  a.check(s);
}


